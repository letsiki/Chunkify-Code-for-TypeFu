@id custom-b92760dd-0f00-4933-a426-a72f3d78ef5c
@type code
@name Python
@language python
@items

from __future__  import division, print_function
from math        import log
from itertools   import combinations, product
from collections import defaultdict
try:
    from math import gcd      except ImportError:
    from fractions import gcd 

def make_Apowers(max_A, max_x): 
    "A dict of {key: value}."
    exponents = exponents_upto(max_x)
    return {key: value}


# ---

def exponents_upto(max_x):
    "Return all odd primes up to max_x, as well as 4."
    exponents = [3, 4] if max_x >= 4 else [3] if max_x == 3 else []
    for x in range(5, max_x, 2):
        if not any(x % p == 0 for p in exponents):
            exponents.append(x)
    return exponents

def exponent(Cz, C): 
    return 3 if (Cz == C == 1) else int(round(log(Cz, C)))


# ---

def make_Czroots_modp(Apowers): 
    "A dict of {key: value}"
    Czroots = defaultdict(list)
    for A in Apowers:
        for (Axp, x) in Apowers[A]:
            Czroots[Axp].append((A, x))
    return Czroots

def simpsons(bases, powers):
    equations = ((A, B, iroot(A ** n + B ** n, n), n)
                 for A, B in combinations(bases, 2)
                 for n in powers)
    return min(equations, key=relative_error)


# ---

def s(b, p):  print('{key: value}^{key: value} + {key: value}^{key: value} = {key: value}^{key: value}'.format(*simpsons(b, p)))
    s(range(1000, 2000), [11, 12, 13])
    s(range(3000, 5000), [12])
    print("Searching beal_modp(500, 100)")
    print(beal_modp(500, 100))


# ---


from __future__ import print_function
import re, sys, types
class Docex:
    
def __repr__(self):
        if self.failed:
            return ('<Test:                     % (self.failed, self.passed))
        else:
            return '<Test: passed all %d>' % self.passed
    
def run_class(self, object):
        if not self.seen(object):
            self.run_docstring(object)
            names = object.__dict__.keys()
            names.sort()
            for name in names:
                self.run_docstring(object.__dict__[name])
    

# ---

def seen(self, object):
        result = self.already_seen.has_key(id(object))
        self.already_seen[id(object)] = 1
        return result


# ---

from __future__ import print_function
from collections import defaultdict

def cluster(neighbors, d, dc):
    unclustered = set(neighbors)     return [closure(g, set(), unclustered, d, dc)
            for g in neighbors if g in unclustered]

def dist(i, j):
    "Distance between two genomes."
    if i == j: return 0
    return neighbors[min(i, j)].get(max(i, j), max_distance)


# ---

def diameter(cluster):
    "The largest distance between two elements of the cluster"
    return max([dist(i, j) for i in cluster for j in cluster] or [0])

def margin(cluster):
    "The distance from a cluster to the nearest g2 outside this cluster."
    return min([d for g in cluster for g2,d in neighbors[g].items()
                if g2 not in cluster] or [max_distance])


# ---

def histo(items):
    "Make a histogram from a sequence of items or (item, count) tuples."
    D = defaultdict(int)
    for item in items:
        if isinstance(item, tuple): D[item[0]] += item[1]
        else: D[item] += 1
    return D

def showh(d):
    "Show a histogram"
    if not isinstance(d, dict): d = histo(d)
    return ' '.join('%s:%s' % i for i in sorted(d.items()))


# ---

def showc(c):
    return "N=%d, D=%d, M=%d: %s %s" % (
        len(c), diameter(c), margin(c), list(c), showh(species[g] for g in c))

def creport(drange, dcrange):
    
def f(P):
        print('\nPercent of individuals within %.2f*diameter of another cluster.'%P)
        table(lambda cl: pct_near_another(cl, P))


# ---


# ---


from __future__ import division
from __future__ import print_function
from collections import Counter, defaultdict

def write_dict(dic, filename):
    "Write a {key: value} dict as 'word \t count' lines in filename."
    out = open(filename, 'w')
    for key in sorted(dic):
        out.write('%s\t%s\n' % (key, dic[key]))
    return out.close()


# ---

def convert_files(filenames, mincount=1e5):
    
def load(filename='top-words.txt'):
    "Load file of 'word \t count' lines into D (a dict), W (length of D) and M (total number of words)."
    global D, W, M
    D = read_dict(filename)
    W = len(D)
    M = sum(D.values())

def histogram(items):
    "Return a Counter of the number of times each key occurs in (key, val) pairs."
    C = Counter()
    for (key, val) in items:
        C[key] += val
    return C


# ---

def tag(name, **kwds): return '<' + name + keywords(kwds) + '>'

def row(cells, **kwds):
    return '<tr>' + ''

def ngram_tables(dic, N, pos=[0, 1, 2, 3, 4, -5, -4, -3, -2, -1]):
    L = len(max(D, key=len))
    counts = Counter()
    counts1 = [Counter() for _ in range(L)]
    counts2 = [[Counter() for i in range(L)]]


# ---

def ngrams(word, N):
    return [word[i:i+N] for i in range(len(word)+1-N)]
import glob

def letter_counts(wc):
    result = defaultdict(int)
    for (word, count) in wc.iteritems():
        for p in pieces(word):
            result[p] += count
    return result

def pieces(word):
    "Yield the 1- and 2-letter grams in (s, i, L) format."
    L = len(word)
    for i in range(L):
        yield (word[i], i, L)
        if i+1 < L:
            yield (word[i:i+2], i, L)


# ---

def test():
    D = {key: value}

def num(ch):
    "Translate 'a' or 'A' to 0, ... 'z' or 'Z' to 25."
    return 'abcdefghijklmnopqrstuvwxyz'.index(ch.lower())

def letter_bar(LC, N=None, factor='', pixels=700):
    if N is None: N = sum(LC.values())
        return ''.join(
        bar(L.lower(), color, LC[L], N, pixels)
        for (L, color) in izip(letters, cycle(colors)))


# ---

def substr(word, pos, length):
    W = len(word)
    if pos >= 0 and pos+length <= W:
        return word[pos:pos+length]
    elif pos < 0 and abs(pos)+length-1 <= W:
        return word[W+pos+1-length:W+pos+1]
    else:
        return None

def lettercount(D, pos):
    LC = histogram((substr(w, pos, 1), D[w]) for w in D)
    del LC[None]
    print(LC)
    pos_name = (str(pos)+'+' if isinstance(pos, tuple) else
                pos if pos < 0 else
                pos+1)
    return '\n<br>\n%-3s %s' % (pos_name, letter_bar(LC))


# ---

def twograms(D2):
    N = sum(D2.values())
    header = '<table cellpadding=1 cellborder=1>'
    rows = [tr([cell(A+B, D2, N) for A in alphabet]) for B in alphabet]
    return '\n'.join([header] + rows + ['</table>'])

def tr(cells):
    return '<tr>' + ''.join(cells)

def comma(n): return '{key: value}'.format(n)


# ---

def col(*args): return args

def colname(col):
    fmt = '%s/%s' if (len(col) == 2) else '%s/%d:%d'
    return  fmt % col

def csvline(first, rest):
    return '\t'.join([first] + map(str, rest))


# ---


import math
import operator as op
from collections import ChainMap as Environment
Symbol = str          List   = list         Number = (int, float) 
class Procedure(object):
    "A user-defined Scheme procedure."
    
def __init__(self, parms, body, env):
        self.parms, self.body, self.env = parms, body, env
    

# ---

def standard_env():
    "An environment with some Scheme standard procedures."
    env = {key: value}
    env.update(vars(math))     env.update({key: value})
    return env
global_env = standard_env()

def parse(program):
    "Read a Scheme expression from a string."
    return read_from_tokens(tokenize(program))


# ---

def atom(token):
    "Numbers become numbers; every other token is a symbol."
    try: return int(token)
    except ValueError:
        try: return float(token)
        except ValueError:
            return Symbol(token)

def repl(prompt='lis.py> '):
    "A prompt-read-eval-print loop."
    while True:
        val = eval(parse(input(prompt)))
        if val is not None:
            print(lispstr(val))


# ---


# ---


import re, sys, io
class Symbol(str): pass

def __init__(self, parms, exp, env):
        self.parms, self.exp, self.env = parms, exp, env
    
def __call__(self, *args):
        return eval(self.exp, Env(self.parms, args, self.env))

def parse(inport):
    "Parse a program: read and expand/error-check it."
        if isinstance(inport, str): inport = InPort(io.StringIO(inport))
    return expand(read(inport), toplevel=True)
eof_object = Symbol('
class InPort:
    "An input port. Retains a line of chars."
    tokenizer = r
    

# ---

def readchar(inport):
    "Read the next character from an input port."
    if inport.line != '':
        ch, inport.line = inport.line[0], inport.line[1:]
        return ch
    else:
        return inport.file.read(1) or eof_object

def read(inport):
    "Read a Scheme expression from an input port."
    

# ---

def find(self, var):
        "Find the innermost Env where var appears."
        if var in self: return self
        elif self.outer is None: raise LookupError(var)
        else: return self.outer.find(var)

def is_pair(x): return x != [] and isa(x, list)

def cons(x, y): return [x]+y

def callcc(proc):
    "Call proc with current continuation; escape only"
    ball = RuntimeWarning("Sorry, can't continue this continuation any longer.")
    

# ---

def add_globals(self):
    "Add some Scheme standard procedures."
    import math, cmath, operator as op
    self.update(vars(math))
    self.update(vars(cmath))
    self.update({key: value})
    return self
isa = isinstance
global_env = add_globals(Env())

def require(x, predicate, msg="wrong length"):
    "Signal a syntax error if predicate is false."
    if not predicate: raise SyntaxError(to_string(x)+': '+msg)
_append, _cons, _let = map(Sym, "append cons let".split())


# ---


# ---


from __future__ import print_function
import re, string, random, glob, operator, heapq
from collections import defaultdict
from math import log10

def memo(f):
    "Memoize function f."
    table = {key: value}
    
def fmemo(*args):
        if args not in table:
            table[args] = f(*args)
        return table[args]
    fmemo.memo = table
    return fmemo


# ---

def segment(text):
    "Return a list of words that is the best segmentation of text."
    if not text: return []
    candidates = ([first]+segment(rem) for first,rem in splits(text))
    return max(candidates, key=Pwords)

def splits(text, L=20):
    "Return a list of all possible (first, rem) pairs, len(first)<=L."
    return [(text[:i+1], text[i+1:]) 
            for i in range(min(len(text), L))]


# ---

def product(nums):
    "Return the product of a sequence of numbers."
    return reduce(operator.mul, nums, 1)
class Pdist(dict):
    "A probability distribution estimated from counts in datafile."
    
def __init__(self, data=[], N=None, missingfn=None):
        for key,count in data:
            self[key] = self.get(key, 0) + int(count)
        self.N = float(N or sum(self.itervalues()))
        self.missingfn = missingfn or (lambda k, N: 1./N)
    

# ---

def datafile(name, sep='\t'):
    "Read key,value pairs from file."
    for line in file(name):
        yield line.split(sep)

def avoid_long_words(key, N):
    "Estimate the probability of an unknown word."
    return 10./(N * 10**len(key))
N = 1024908267229 
Pw  = Pdist(datafile('count_1w.txt'), N, avoid_long_words)


# ---

def segment2(text, prev='<S>'): 
    "Return (log P(words), words), where words is the best segmentation." 
    if not text: return 0.0, [] 
    candidates = [combine(log10(cPw(first, prev)), first, segment2(rem, first)) 
                  for first,rem in splits(text)] 
    return max(candidates) 


# ---

def encode(msg, key): 
    "Encode a message with a substitution cipher." 
    return msg.translate(string.maketrans(ul(alphabet), ul(key))) 

def ul(text): return text.upper() + text.lower() 
alphabet = 'abcdefghijklmnopqrstuvwxyz' 

def shift(msg, n=13): 
    "Encode a message with a shift (Caesar) cipher." 
    return encode(msg, alphabet[n:]+alphabet[:n]) 


# ---

def allwords(text): 
    "Return a list of alphabetic words in text, lowercase." 
    return re.findall('[a-z]+', text.lower()) 

def decode_shift(msg): 
    "Find the best decoding of a message encoded with a shift cipher." 
    candidates = [shift(msg, n) for n in range(len(alphabet))] 
    return max(candidates, key=logPwords) 


# ---

def just_letters(text): 
    "Lowercase text and remove all characters except [a-z]." 
    return re.sub('[^a-z]', '', text.lower()) 

def decode_shift2(msg): 
    "Decode a message encoded with a shift cipher, with no spaces." 
    candidates = [segment2(shift(msg, n)) for n in range(len(alphabet))] 
    p, words = max(candidates) 
    return ' '.join(words) 


# ---

def ngrams(seq, n):
    "List all the (overlapping) ngrams in a sequence."
    return [seq[i:i+n] for i in range(1+len(seq)-n)]
P3l = Pdist(datafile('count_3l.txt')) 
P2l = Pdist(datafile('count_2l.txt')) 

def shuffled(seq): 
    "Return a randomly shuffled copy of the input sequence." 
    seq = list(seq) 
    random.shuffle(seq) 
    return seq 
cat = ''.join 


# ---

def corrections(text): 
    "Spell-correct all words in text." 
    return re.sub('[a-zA-Z]+', lambda m: correct(m.group(0)), text) 

def correct(w): 
    "Return the word that is the most likely spell correction of w." 
    candidates = edits(w).items() 
    c, edit = max(candidates, key=lambda (c,e): Pedit(e) * Pw(c)) 
    return c 


# ---

def edits(word, d=2): 
    "Return a dict of {key: value} pairs within d edits of word." 
    results = {key: value} 
    
def editsR(hd, tl, d, edits): 
        

# ---

from __future__ import print_function
import string, random, os, re, bisect

def is_panama(p):
    "Test if p is a Panama-ish palindrome."
    
def is_unique(seq): return len(seq) == len(dict(zip(seq, seq)))
    return (p.endswith('Panama') and is_palindrome(p)
	    and is_unique([s.strip() for s in p.split(',')]))


# ---

def canonical(word, sub=re.compile('[^A-Za-z0-9]').sub):
    "The canonical form for comparing: lowercase alphanumerics."
    return sub('', word).lower()

def update(obj, **entries): obj.__dict__.update(entries); return obj
class PalDict:
    
def __init__(self, fw=None, bw=None, truename=None):
        update(self, fw=fw or _fw, bw=bw or _bw, truename=truename or _truename)
    

# ---

def endswith(self, suffix, k=100):
        return k_startingwith(k, self.bw, suffix)

def missing(self, k=20):
        if self.diff >= 0:             substr =  self.left[-1][-self.diff:]
            return substr, self.dict.endswith(substr, k)
        else:             substr =  self.right[-1][self.diff:]
            return substr, self.dict.startswith(substr, k)
    

# ---

def __str__(self):
        truename = self.dict.truename
        lefts = [truename[w] for w in self.left]
        rights = [truename[reverse(w)] for w in reverse(self.right[:])]
        return ', '.join(lefts + ['*****'] + rights)

def reverse(x):
    "Reverse a list or string."
    if type(x) == type(''):
        return ''.join(reverse(list(x)))
    else:
        x.reverse()
        return x
if __name__ == '__main__': read_dict(); p = Panama(); p.search()


# ---

from __future__ import print_function
import random, re, bisect, time
try:
    xrange          except NameError:
    xrange = range  

def is_panama(s):
    "Test if string s is a Panama-ish palindrome."
    return is_palindrome(s) and is_unique(phrases(s))

def is_palindrome(s):
    "Test if a string is a palindrome."
    s1 = canonical(s)
    return s1 == reversestr(s1)


# ---

def canonical(word, sub=re.compile('''[-* \t\n\r.,;!?:()`"']''').sub):
    "The canonical form for comparing: lowercase, no blanks or punctuation."
    return sub('', word).lower()

def reversestr(x):
    "Reverse a string."
    return x[::-1]

def is_unique(seq):
    "Return true if seq has no duplicate elements."
    return len(seq) == len(set(seq))


# ---

def startswith(self, prefix):
        return self._k_startingwith(self.words, prefix)
    
def endswith(self, rsuffix):
        return map(reversestr, self._k_startingwith(self.rwords, rsuffix))
    
def __contains__(self, word):
        return word in self.truename
    
def anpdictshort():
    "Find the words that are valid when every phrase must start with 'a'"
    

# ---

def remove(self, dir, word):
        "remove a word"
        oldword = getattr(self, dir).pop()
        assert word == oldword
        self.diff -= factor[dir] * len(word)
        del self.seen[word]
        self.stack.pop()
    
def __len__(self):
        return len(self.left) + len(self.right)
    

# ---


# ---

from collections import Counter, deque
import re
class PhraseDict(dict):
    
def __init__(self, phrases):
        for phrase in phrases:
            phrase = phrase.strip()
            self[letters(phrase)] = phrase
        self.prefixes = Counter(x for p in self for x in prefixes(p))
        self.suffixes = Counter(x for p in self for x in suffixes(p))


# ---

def suffixes(phrase): return [phrase[-i:] for i in range(1, len(phrase) + 1)]

def letters(phrase, sub=re.compile(r'[\W]+').sub):
    "Remove all the non-letters from phrase; return lowercase version."
    return sub('', phrase).lower()
DICT = PhraseDict(open('npdict.txt'))
class Panama:
    
def __str__(self): return self.original_phrases(self.best)
    

# ---

def applicable_actions(self):
        L, R, D = self.L, self.R, self.dict
        actions = []
        
def is_allowed(self, phrase): return phrase in self.dict and phrase not in self.set
    

# ---

from __future__ import print_function
grammar = {key: value}

def mklist(x):
    if type(x) == type([]): return x
    else: return [x]

def match(forest, rhs):
    for i in range(len(rhs)):
        if category(forest[i]) != rhs[i] and forest[i] != rhs[i]: return 0
    return 1

def category(forest):
    if type(forest) == type(()): return forest[0]
    else: return 'word'


# ---


import re, string, time, os
try:
    cmp             except NameError:
    
def cmp(x, y):          return (x > y) - (x < y)
id = r'[a-zA-Z_][a-zA-Z_0-9]*' g1, g2, g3, g4 = r'\1 \2 \3 \4'.split() 
def b(text): return '<b>%s</b>' % text

def i(text): return '<i>%s</i>' % text

def color(rgb, text): return '<font color="%s">%s</font>' % (rgb, text)


# ---

def hilite(text, bg="ffff00"):
    return '<b style="background-color:%s"><a name="%s">%s</b>' % (
        bg, text, text)

def modulelink(module, baseurl=''):
    if module+'.py' not in local_files:
        baseurl = 'http://www.python.org/doc/current/lib/module-'
    return link(baseurl+module+'.html', module)


# ---

def find1(regex, str):
    return (re.findall(regex, str) or ['&nbsp;'])[0]

def num_cmp(x, y):
    
def num(x):
        nums = re.findall('[0-9]+', x or '')
        if nums: return int(nums[0])
        return x
    return cmp(num(x[0]), num(y[0]))


# ---


notebooks = {key: value}
python_files = [list_data]    

def cols(items) -> str: "Make columns"; return '|' + '|'.join(items) + '|'

def table(headers, lines) -> str: 
    return f'\n\n{key: value}\n{key: value}\n' + '\n'.join(lines)

def format_notebooks() -> str:
    find_recent(notebooks)
    return '\n'.join(format_category(name) for name in notebooks)


# ---

def format_category(category) -> str:
    print(f'{key: value} notebooks in {key: value}')
    return table(('Run', 'Year', category),
                 [format_notebook(*line) for line in notebooks[category]])

def format_pythons() -> str:
    print(f'{key: value} pyfiles')
    return table(('File', 'Description', 'Documentation'),
                 [format_python(*line) for line in python_files])


# ---


# ---

import random
import collections 
import itertools 
CARDS = [number + color + shade + symbol 
         for number in '123' 
         for color  in 'RGP' 
         for shade  in '@O=' 
         for symbol in '0SD']

def deal(n, deck): 
    "Deal n cards from the deck."
    return [deck.pop() for _ in range(n)]


# ---

def find_set(layout):
    "Return a set found from this layout, if there is one."
    for cards in itertools.combinations(layout, 3):
        if is_set(cards):
            return cards
    return ()

def Tallies(): 
    "A data structure to keep track, for each size, the number of sets and no-sets."
    return collections.defaultdict(lambda: {key: value})


# ---

def tally_initial_layout(N, sizes=(12, 15)):
    "Record tallies for N initial deals."
    tallies = Tallies()
    deck = list(CARDS)
    for deal in range(N):
        random.shuffle(deck)
        for size in sizes:
            tally(tallies, deck[:size])
    return tallies

def tally_initial_layout_no_prior_sets(N, sizes=(12, 15)):
    tallies = Tallies()
    deck = list(CARDS)
    for deal in range(N):
        random.shuffle(deck)
        for size in sizes:
            if not find_set(deck[:size-3]):
                tally(tallies, deck[:size])
    return tallies


# ---


import re
from collections import Counter

def words(text): return re.findall(r'\w+', text.lower())
WORDS = Counter(words(open('big.txt').read()))

def P(word, N=sum(WORDS.values())): 
    "Probability of `word`."
    return WORDS[word] / N

def correction(word): 
    "Most probable spelling correction for word."
    return max(candidates(word), key=P)


# ---

def known(words): 
    "The subset of `words` that appear in the dictionary of WORDS."
    return set(w for w in words if w in WORDS)

def edits2(word): 
    "All edits that are two edits away from `word`."
    return (e2 for e1 in edits1(word) for e2 in edits1(e1))


# ---



def parse_grid(grid):
        values = dict((s, digits) for s in squares)
    for s,d in grid_values(grid).items():
        if d in digits and not assign(values, s, d):
            return False     return values

def grid_values(grid):
    "Convert grid into a dict of {key: value} with '0' or '.' for empties."
    chars = [c for c in grid if c in digits or c in '0.']
    if len(chars) != 81: print(grid, chars, len(chars))
    assert len(chars) == 81
    return dict(zip(squares, chars))


# ---

def solve(grid): return search(parse_grid(grid))

def solve_all(grids, name=''):
    times, results = zip(*[time_solve(grid) for grid in grids])
    N = len(results)
    if N > 1:
        print("Solved %d of %d %s puzzles (avg %.2f secs (%d Hz), max %.2f secs)." % (
            sum(results), N, name, sum(times)/N, N/sum(times), max(times)))


# ---

def solved(values):
    "A puzzle is solved if each unit is a permutation of the digits 1 to 9."
    

# ---

from __future__ import division
from __future__ import print_function
import re
from accum import *
acc_re = re.compile("[[](.+):(.+) for (.+) in (.+)[]]")

def expand_accumulations(program_text):
    
def _(matchobj):
        (acc, exp, x, it) = matchobj.groups()
        return "accumulation(%s, lambda %s: (%s), %s)" % (acc, x, exp, it)
    return acc_re.sub(_, program_text)


# ---


# ---


from __future__ import print_function
import sys, re, os, os.path
class Copier:
    "Smart-copier (YAPTU) class"
    
def copyblock(self, i=0, last=None):
        "Main copy method: process lines [i,last) of block"
        
def __init__(self, globals):
        "Create a Copier."
        self.regex   = re.compile("<<(.*?)>>")
        self.globals = globals
        self.globals['_cb'] = self.copyblock
        self.outf = sys.stdout
        self.verbose = 0
    

# ---

def oops(self, why, what):
        print('Something went wrong in %sing {key: value}' % (why, what))
        print('Globals:', self.globals.keys(), \
            self.globals.get('SECTIONS', '???'))
        raise
    

# ---



# ---